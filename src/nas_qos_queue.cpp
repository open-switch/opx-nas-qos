/*
 * Copyright (c) 2019 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 * FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing
 * permissions and limitations under the License.
 */

/*!
 * \file   nas_qos_queue.cpp
 * \brief  NAS QOS queue Object
 * \date   02-2015
 * \author
 */

#include "event_log.h"
#include "std_assert.h"
#include "nas_qos_queue.h"
#include "nas_ndi_qos.h"
#include "nas_qos_switch.h"

nas_qos_queue::nas_qos_queue (nas_qos_switch* p_switch,
                              nas_qos_queue_key_t key)
           : base_obj_t (p_switch),
             key(key)
{
    memset(&cfg, 0, sizeof(cfg));
    ndi_port_id = {0};
    queue_id = 0;
}

const nas_qos_switch& nas_qos_queue::get_switch()
{
    return static_cast<const nas_qos_switch&> (base_obj_t::get_switch());
}

bool  nas_qos_queue::opaque_data_to_cps (cps_api_object_t cps_obj) const
{
    constexpr size_t  attr_size = 1;
    cps_api_attr_id_t  attr_id_list[] = {BASE_QOS_QUEUE_DATA};
    return nas::ndi_obj_id_table_cps_serialize (_ndi_obj_ids, cps_obj, attr_id_list, attr_size);
}

void nas_qos_queue::commit_create (bool rolling_back)

{
    if (!is_attr_dirty (BASE_QOS_QUEUE_PARENT)) {
        throw nas::base_exception {NAS_BASE_E_CREATE_ONLY,
                        __PRETTY_FUNCTION__,
                        "Mandatory attributes are not present"};
    }

    base_obj_t::commit_create(rolling_back);
}

void* nas_qos_queue::alloc_fill_ndi_obj (nas::mem_alloc_helper_t& m)
{
    // NAS Qos queue does not allocate memory to save the incoming tentative attributes
    return this;
}

bool nas_qos_queue::push_create_obj_to_npu (npu_id_t npu_id,
                                     void* ndi_obj)
{
    ndi_obj_id_t ndi_queue_id;
    t_std_error rc = STD_ERR_OK;

    EV_LOGGING(QOS, DEBUG, "NAS-QOS", "Creating obj on NPU %d", npu_id);

    nas_qos_queue * nas_qos_queue_p = static_cast<nas_qos_queue*> (ndi_obj);

    // form attr_list
    std::vector<uint64_t> attr_list;
    // Mandatory keys {Port-id, type, queue-number} must be manually added during cps-create
    // These 3 attributes are not marked-dirty because cps-set cannot alter them but use them to get ndi-qid
    attr_list.resize(_set_attributes.len() + 3);

    uint_t num_attr = 0;
    attr_list[num_attr++] = BASE_QOS_QUEUE_PORT_ID;
    attr_list[num_attr++] = BASE_QOS_QUEUE_TYPE;
    attr_list[num_attr++] = BASE_QOS_QUEUE_QUEUE_NUMBER;
    for (auto attr_id: _set_attributes) {
        attr_list[num_attr++] = attr_id;
    }

    ndi_qos_queue_struct_t  ndi_queue = {0};
    ndi_queue.ndi_port = nas_qos_queue_p->ndi_port_id;
    ndi_queue.type = nas_qos_queue_p->key.type;
    ndi_queue.queue_index = nas_qos_queue_p->key.local_queue_id;

    nas_qos_switch& p_switch = const_cast <nas_qos_switch &> (get_switch());
    ndi_queue.parent = p_switch.nas2ndi_scheduler_group_id(nas_qos_queue_p->cfg.parent);

    if (is_attr_dirty(BASE_QOS_QUEUE_SCHEDULER_PROFILE_ID))
        ndi_queue.scheduler_profile =
                p_switch.nas2ndi_scheduler_profile_id(nas_qos_queue_p->cfg.scheduler_profile, npu_id);

    if (is_attr_dirty(BASE_QOS_QUEUE_WRED_ID))
        ndi_queue.wred_id =
                p_switch.nas2ndi_wred_profile_id(nas_qos_queue_p->cfg.wred_id, npu_id);

    EV_LOGGING(QOS, DEBUG, "NAS-QOS", "Creating queue object on NPU %d, npu_id %u, port_id %u",
            npu_id, ndi_queue.ndi_port.npu_id, ndi_queue.ndi_port.npu_port);


    if ((rc = ndi_qos_create_queue (npu_id,
                                   &attr_list[0],
                                   num_attr,
                                   &ndi_queue,
                                   &ndi_queue_id))
            != STD_ERR_OK)
    {
        EV_LOGGING(QOS, DEBUG, "NAS-QOS", "Creating queue on NPU %d failed!", npu_id);
        throw nas::base_exception {rc, __PRETTY_FUNCTION__,
            "NDI QoS QUEUE Create Failed"};
    }
    // Cache the new QUEUE ID generated by NDI
    set_ndi_obj_id(ndi_queue_id);

    return true;
}


bool nas_qos_queue::push_delete_obj_to_npu (npu_id_t npu_id)
{
    t_std_error rc;

    EV_LOGGING(QOS, DEBUG, "NAS-QOS", "Deleting obj on NPU %d", npu_id);

    if ((rc = ndi_qos_delete_queue(npu_id, ndi_obj_id()))
        != STD_ERR_OK)
    {
        throw nas::base_exception {rc, __PRETTY_FUNCTION__,
            "NDI Queue Delete Failed"};
    }

    return true;
}

bool nas_qos_queue::is_leaf_attr (nas_attr_id_t attr_id)
{
    // Table of function pointers to handle modify of Qos queue
    // attributes.
    static const std::unordered_map <BASE_QOS_QUEUE_t,
                                     bool,
                                     std::hash<int>>
        _leaf_attr_map =
    {
        // modifiable objects
        {BASE_QOS_QUEUE_PARENT,                 true},
        {BASE_QOS_QUEUE_WRED_ID,                true},
        {BASE_QOS_QUEUE_BUFFER_PROFILE_ID ,     true},
        {BASE_QOS_QUEUE_SCHEDULER_PROFILE_ID ,  true},
    };

    return (_leaf_attr_map.at(static_cast<BASE_QOS_QUEUE_t>(attr_id)));
}

bool nas_qos_queue::push_leaf_attr_to_npu (nas_attr_id_t attr_id,
                                           npu_id_t npu_id)
{
    t_std_error rc = STD_ERR_OK;

    EV_LOGGING(QOS, DEBUG, "QOS", "Modifying npu: %d, attr_id %lu",
                    npu_id, attr_id);

    nas_qos_switch & nas_switch = const_cast<nas_qos_switch &>(get_switch());
    ndi_qos_queue_struct_t ndi_queue_info = {0};

    switch (attr_id) {
    case BASE_QOS_QUEUE_PARENT:
        ndi_queue_info.parent = nas_switch.nas2ndi_scheduler_group_id(cfg.parent);
        break;

    case BASE_QOS_QUEUE_WRED_ID:
        ndi_queue_info.wred_id = nas_switch.nas2ndi_wred_profile_id(cfg.wred_id, npu_id);
        break;

    case BASE_QOS_QUEUE_BUFFER_PROFILE_ID:
        ndi_queue_info.buffer_profile = nas_switch.nas2ndi_buffer_profile_id(cfg.buffer_profile, npu_id);
        break;

    case BASE_QOS_QUEUE_SCHEDULER_PROFILE_ID:
        ndi_queue_info.scheduler_profile = nas_switch.nas2ndi_scheduler_profile_id(cfg.scheduler_profile, npu_id);
        break;

    default:
        STD_ASSERT (0); //non-modifiable object
    }

    rc = ndi_qos_set_queue_attr(npu_id,
                                   ndi_obj_id(),
                                   (BASE_QOS_QUEUE_t)attr_id,
                                   &ndi_queue_info);
    if (rc != STD_ERR_OK)
    {
        throw nas::base_exception {rc, __PRETTY_FUNCTION__,
            "NDI attribute Set Failed"};
    }

   return true;
}

