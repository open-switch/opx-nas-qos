/*
 * Copyright (c) 2019 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 * FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing
 * permissions and limitations under the License.
 */

/*!
 * \file   nas_qos_buffer_profile.cpp
 * \brief  NAS QOS buffer_profile Object
 * \date   03-2016
 * \author
 */

#include "event_log.h"
#include "std_assert.h"
#include "nas_qos_buffer_profile.h"
#include "nas_ndi_qos.h"
#include "nas_qos_switch.h"

nas_qos_buffer_profile::nas_qos_buffer_profile (nas_qos_switch* p_switch)
           : base_obj_t (p_switch)
{
    memset(&cfg, 0, sizeof(cfg));
    buffer_profile_id = 0;
}

const nas_qos_switch& nas_qos_buffer_profile::get_switch()
{
    return static_cast<const nas_qos_switch&> (base_obj_t::get_switch());
}


void nas_qos_buffer_profile::commit_create (bool rolling_back)

{
    base_obj_t::commit_create(rolling_back);
}

void* nas_qos_buffer_profile::alloc_fill_ndi_obj (nas::mem_alloc_helper_t& m)
{
    // NAS Qos buffer_profile does not allocate memory to save the incoming tentative attributes
    return this;
}

bool nas_qos_buffer_profile::push_create_obj_to_npu (npu_id_t npu_id,
                                     void* ndi_obj)
{
    ndi_obj_id_t ndi_buffer_profile_id;
    t_std_error rc;

    EV_LOGGING(QOS, DEBUG, "NAS-QOS", "Creating obj on NPU %d", npu_id);

    nas_qos_buffer_profile * bp = static_cast<nas_qos_buffer_profile*> (ndi_obj);

    // form attr_list
    std::vector<uint64_t> attr_list;
    attr_list.resize(_set_attributes.len());

    uint_t num_attr = 0;
    for (auto attr_id: _set_attributes) {
        attr_list[num_attr++] = attr_id;
    }

    ndi_qos_buffer_profile_struct_t cfg = {0};
    nas_qos_switch & p_switch = const_cast <nas_qos_switch &> (get_switch());
    cfg.pool_id = p_switch.nas2ndi_pool_id(bp->cfg.pool_id, npu_id);

    cfg.buffer_size = bp->cfg.buffer_size;
    cfg.threshold_mode = bp->cfg.threshold_mode;
    cfg.shared_dynamic_th = bp->cfg.shared_dynamic_th;
    cfg.shared_static_th = bp->cfg.shared_static_th;
    cfg.xoff_th = bp->cfg.xoff_th;
    cfg.xon_th = bp->cfg.xon_th;
    cfg.xon_offset_th = bp->cfg.xon_offset_th;

    if ((rc = ndi_qos_create_buffer_profile (npu_id,
                                   &attr_list[0],
                                   num_attr,
                                   &cfg,
                                   &ndi_buffer_profile_id))
            != STD_ERR_OK)
    {
        EV_LOGGING(QOS, DEBUG, "NAS-QOS", "NDI QoS buffer_profile Create Failed");
        throw nas::base_exception {rc, __PRETTY_FUNCTION__,
            "NDI QoS buffer_profile Create Failed"};
    }
    // Cache the new buffer_profile ID generated by NDI
    set_ndi_obj_id(npu_id, ndi_buffer_profile_id);

    return true;

}


bool nas_qos_buffer_profile::push_delete_obj_to_npu (npu_id_t npu_id)
{
    t_std_error rc;

    EV_LOGGING(QOS, DEBUG, "NAS-QOS", "Deleting obj on NPU %d", npu_id);

    if ((rc = ndi_qos_delete_buffer_profile(npu_id, ndi_obj_id(npu_id)))
        != STD_ERR_OK)
    {
        throw nas::base_exception {rc, __PRETTY_FUNCTION__,
            "NDI buffer_profile Delete Failed"};
    }

    return true;
}

bool nas_qos_buffer_profile::is_leaf_attr (nas_attr_id_t attr_id)
{
    // Table of function pointers to handle modify of Qos buffer_profile
    // attributes.
    static const std::unordered_map <BASE_QOS_BUFFER_PROFILE_t,
                                     bool,
                                     std::hash<int>>
        _leaf_attr_map =
    {
        // modifiable objects
        {BASE_QOS_BUFFER_PROFILE_POOL_ID,  true},
        {BASE_QOS_BUFFER_PROFILE_BUFFER_SIZE,  true},
        {BASE_QOS_BUFFER_PROFILE_THRESHOLD_MODE, true},
        {BASE_QOS_BUFFER_PROFILE_SHARED_DYNAMIC_THRESHOLD, true},
        {BASE_QOS_BUFFER_PROFILE_SHARED_STATIC_THRESHOLD, true},
        {BASE_QOS_BUFFER_PROFILE_XOFF_THRESHOLD, true},
        {BASE_QOS_BUFFER_PROFILE_XON_THRESHOLD, true},
        {BASE_QOS_BUFFER_PROFILE_XON_OFFSET_THRESHOLD, true},
        {BASE_QOS_BUFFER_PROFILE_NAME, true},

        //The NPU ID list attribute is handled by the base object itself.
    };

    return (_leaf_attr_map.at(static_cast<BASE_QOS_BUFFER_PROFILE_t>(attr_id)));
}

bool nas_qos_buffer_profile::push_leaf_attr_to_npu (nas_attr_id_t attr_id,
                                           npu_id_t npu_id)
{
    t_std_error rc = STD_ERR_OK;
    nas_qos_switch & p_switch = const_cast <nas_qos_switch &> (get_switch());

    EV_LOGGING(QOS, DEBUG, "QOS", "Modifying npu: %d, attr_id %lu",
                    npu_id, attr_id);

    ndi_qos_buffer_profile_struct_t cfg= {0};

    switch (attr_id) {
    case BASE_QOS_BUFFER_PROFILE_POOL_ID:
        cfg.pool_id = p_switch.nas2ndi_pool_id(get_buffer_pool_id(), npu_id);
        break;

    case BASE_QOS_BUFFER_PROFILE_BUFFER_SIZE:
        cfg.buffer_size = get_buffer_size();
        break;

    case BASE_QOS_BUFFER_PROFILE_THRESHOLD_MODE:
        cfg.threshold_mode = get_threshold_mode();
        break;

    case BASE_QOS_BUFFER_PROFILE_SHARED_DYNAMIC_THRESHOLD:
        cfg.shared_dynamic_th = get_shared_dynamic_th();
        break;

    case BASE_QOS_BUFFER_PROFILE_SHARED_STATIC_THRESHOLD:
        cfg.shared_static_th = get_shared_static_th();
        break;

    case BASE_QOS_BUFFER_PROFILE_XOFF_THRESHOLD:
        cfg.xoff_th = get_xoff_th();
        break;

    case BASE_QOS_BUFFER_PROFILE_XON_THRESHOLD:
        cfg.xon_th = get_xon_th();
        break;

    case BASE_QOS_BUFFER_PROFILE_XON_OFFSET_THRESHOLD:
        cfg.xon_offset_th = get_xon_offset_th();
        break;

    case BASE_QOS_BUFFER_PROFILE_NAME:
        return true; // do not pass it to SAI

    default:
        STD_ASSERT (0); //non-modifiable object
    }

    rc = ndi_qos_set_buffer_profile_attr(npu_id,
                                   ndi_obj_id(npu_id),
                                   (BASE_QOS_BUFFER_PROFILE_t)attr_id,
                                   &cfg);
    if (rc != STD_ERR_OK) {
            throw nas::base_exception {rc, __PRETTY_FUNCTION__,
                "NDI attribute Set Failed"};
    }

    return true;
}

